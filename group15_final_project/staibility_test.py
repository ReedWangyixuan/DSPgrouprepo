#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
This py will find the stability of the big version in linux_stable. The big version is v4.4, v4.9,
v4.14 and v4.19.
The 2 dimentions is the fix amplitude and the time interval of each version of each small version like v4.4.1.
For example,v4.4.1...v4.4.3's list is like [[2, 81.0], [20, 82.0], [4, 111.0]]
The data can be get from find_TimeAmplitude.py. Because it takes too long to crawl these data every time so
I use the result form that py file directly.
'''

__author__ = "Group 15 members in DataScience of Lanzhou University"
__copyright__ = "Copyright 2020, Group15 in DataScience of Lanzhou University , China"
__license__ = "GPL V3"
__version__ = "1.0"
__maintainer__ = "Chunyao Dong"
__email__ = ["dongchy18@lzu.edu.cn"]
__status__ = "Done"


from classify import KMeansClusterer
import matplotlib.pyplot as plt

#the data crawled by find_TimeAmplitude.py.
v44_216 = [[2, 81.0], [20, 82.0], [4, 111.0], [60, 47.0], [6, 64.0], [31, 132.0], [55, 212.0], [5, 195.0], [169, 112.0], [252, 33.0], [1, 188.0], [6, 394.0], [5, 41.0], [2, 34.0], [20, 91.0], [4, 243.0], [13, 185.0], [4, 136.0], [23, 123.0], [23, 325.0], [7, 239.0], [23, 246.0], [4, 330.0], [2, 73.0], [2, 0], [15, 49.0], [4, 228.0], [11, 302.0], [28, 0], [2, 79.0], [6, 148.0], [6, 55.0], [6, 117.0], [1, 84.0], [5, 89.0], [3, 29.0], [2, 19.0], [9, 308.0], [10, 161.0], [10, 75.0], [6, 100.0], [3, 64.0], [3, 104.0], [3, 188.0], [2, 102.0], [6, 13.0], [3, 22.0], [3, 21.0], [7, 8.0], [44, 49.0], [8, 264.0], [9, 113.0], [1, 91.0], [8, 314.0], [52, 86.0], [37, 476.0], [1, 215.0], [1, 48.0], [1, 89.0], [18, 293.0], [11, 96.0], [4, 368.0], [1, 13.0], [26, 416.0], [2, 447.0], [6, 127.0], [6, 253.0], [11, 75.0], [7, 409.0], [1, 22.0], [34, 489.0], [1, 378.0], [4, 137.0], [3, 176.0], [35, 531.0], [2, 568.0], [55, 262.0], [2, 115.0], [2, 213.0], [7, 204.0], [1, 51.0], [2, 58.0], [14, 623.0], [3, 577.0], [11, 116.0], [21, 29.0], [134, 75.0], [2, 326.0], [2, 572.0], [3, 139.0], [233, 36.0], [87, 34.0], [23, 226.0], [98, 52.0], [35, 65.0], [14, 382.0], [4, 343.0], [3, 637.0], [91, 182.0], [13, 521.0], [2, 0], [2, 195.0], [5, 113.0], [27, 331.0], [5, 296.0], [85, 352.0], [6, 569.0], [2, 204.0], [3, 0], [1, 38.0], [1, 757.0], [18, 303.0], [4, 793.0], [2, 127.0], [10, 601.0], [8, 562.0], [11, 826.0], [1, 669.0], [33, 36.0], [2, 10.0], [37, 664.0], [9, 504.0], [61, 455.0], [25, 197.0], [4, 14.0], [3, 699.0], [3, 373.0], [1, 619.0], [3, 15.0], [35, 863.0], [2, 55.0], [20, 202.0], [5, 245.0], [1, 0], [26, 17.0], [1, 83.0], [6, 867.0], [142, 683.0], [15, 144.0], [4, 36.0], [4, 0], [1, 46.0], [1, 695.0], [2, 532.0], [1, 97.0], [2, 26.0], [2, 734.0], [6, 428.0], [2, 0], [2, 50.0], [2, 77.0], [13, 419.0], [7, 404.0], [2, 682.0], [2, 370.0], [2, 868.0], [37, 867.0], [2, 6.0], [53, 122.0], [56, 31.0], [14, 20.0], [2, 992.0], [4, 366.0], [2, 460.0], [6, 998.0], [7, 454.0], [2, 847.0], [4, 259.0], [5, 67.0], [16, 864.0], [21, 110.0], [50, 70.0], [8, 237.0], [10, 664.0], [4, 1167.0], [10, 841.0], [3, 1169.0], [2, 1042.0], [1, 936.0], [16, 870.0], [119, 0], [28, 162.0], [2, 0], [9, 680.0], [2, 42.0], [2, 390.0], [1, 90.0], [6, 34.0], [20, 508.0], [7, 74.0], [6, 152.0], [15, 328.0], [2, 230.0], [19, 218.0], [8, 197.0], [54, 161.0], [2, 38.0], [41, 124.0], [13, 68.0], [3, 88.0], [5, 546.0], [2, 489.0], [21, 1134.0], [4, 0], [7, 368.0], [2, 818.0], [15, 113.0], [21, 89.0], [2, 95.0], [12, 291.0], [17, 570.0], [1, 73.0], [2, 89.0], [4, 190.0], [3, 417.0]]
v49_216 = [[5, 70.0], [1, 100.0], [2, 125.0], [6, 116.0], [13, 188.0], [18, 107.0], [8, 21.0], [5, 115.0], [8, 28.0], [24, 157.0], [1, 50.0], [1, 40.0], [1, 271.0], [8, 109.0], [6, 161.0], [2, 99.0], [4, 19.0], [2, 231.0], [4, 48.0], [8, 35.0], [14, 293.0], [2, 96.0], [15, 134.0], [24, 45.0], [51, 54.0], [11, 75.0], [6, 256.0], [3, 75.0], [20, 99.0], [7, 99.0], [4, 100.0], [2, 120.0], [5, 189.0], [15, 141.0], [15, 192.0], [14, 194.0], [15, 145.0], [28, 262.0], [2, 194.0], [6, 211.0], [6, 211.0], [6, 23.0], [6, 78.0], [7, 46.0], [3, 207.0], [5, 116.0], [2, 29.0], [9, 65.0], [3, 291.0], [13, 29.0], [3, 147.0], [1, 122.0], [6, 292.0], [9, 223.0], [8, 0], [50, 559.0], [1, 152.0], [7, 52.0], [1, 65.0], [2, 382.0], [69, 343.0], [1, 24.0], [1, 27.0], [1, 25.0], [2, 350.0], [8, 113.0], [2, 356.0], [7, 296.0], [2, 21.0], [1, 352.0], [7, 301.0], [1, 38.0], [9, 205.0], [24, 0], [24, 38.0], [1, 321.0], [3, 303.0], [1, 261.0], [2, 123.0], [2, 274.0], [1, 300.0], [12, 562.0], [24, 304.0], [59, 44.0], [2, 100.0], [1, 182.0], [2, 387.0], [7, 504.0], [2, 456.0], [8, 268.0], [8, 257.0], [9, 419.0], [14, 393.0], [36, 86.0], [2, 122.0], [7, 458.0], [4, 31.0], [9, 343.0], [3, 62.0], [2, 260.0], [17, 127.0], [41, 128.0], [61, 787.0], [4, 0], [3, 0], [30, 290.0], [61, 322.0], [2, 57.0], [9, 46.0], [4, 214.0], [3, 451.0], [1, 346.0], [7, 242.0], [8, 77.0], [5, 532.0], [4, 105.0], [2, 341.0], [2, 45.0], [2, 540.0], [2, 428.0], [55, 0], [7, 51.0], [2, 85.0], [4, 406.0], [31, 125.0], [1, 370.0], [45, 555.0], [11, 223.0], [6, 54.0], [4, 115.0], [17, 45.0], [13, 31.0], [21, 32.0], [7, 434.0], [14, 702.0], [1, 357.0], [12, 141.0], [14, 479.0], [4, 0], [15, 32.0], [3, 614.0], [6, 192.0], [5, 1027.0], [2, 91.0], [2, 31.0], [5, 267.0], [5, 176.0], [12, 83.0], [4, 89.0], [53, 15.0], [25, 65.0], [1, 66.0], [3, 199.0], [25, 39.0], [6, 103.0], [4, 64.0], [4, 0], [8, 767.0], [5, 607.0], [4, 539.0], [23, 90.0], [2, 63.0], [6, 549.0], [2, 188.0], [15, 487.0], [8, 41.0], [7, 105.0], [9, 497.0], [19, 56.0], [8, 35.0], [76, 103.0], [15, 496.0], [2, 776.0], [4, 696.0], [4, 732.0], [27, 225.0], [4, 90.0], [6, 135.0], [10, 766.0], [1, 367.0], [4, 0], [19, 162.0], [46, 0], [9, 680.0], [50, 53.0], [10, 795.0], [6, 104.0], [3, 34.0], [4, 249.0], [2, 133.0], [11, 152.0], [2, 328.0], [8, 230.0], [1, 394.0], [12, 197.0], [4, 161.0], [13, 38.0], [25, 124.0], [2, 65.0], [5, 643.0], [2, 331.0], [4, 489.0], [42, 966.0], [26, 0], [7, 368.0], [2, 397.0], [19, 355.0], [2, 260.0], [24, 95.0], [2, 695.0], [6, 857.0], [2, 956.0], [2, 106.0], [8, 1995.0], [9, 653.0]]
v414_173 = [[2, 101.0], [1, 275.0], [10, 113.0], [33, 150.0], [6, 93.0], [6, 38.0], [4, 94.0], [31, 114.0], [3, 42.0], [2, 63.0], [3, 3.0], [1, 52.0], [9, 67.0], [3, 179.0], [2, 74.0], [27, 123.0], [4, 79.0], [6, 16.0], [17, 204.0], [1, 560.0], [5, 195.0], [3, 98.0], [2, 76.0], [4, 174.0], [4, 34.0], [8, 162.0], [14, 132.0], [2, 141.0], [2, 377.0], [1, 197.0], [16, 15.0], [2, 70.0], [17, 122.0], [20, 88.0], [28, 427.0], [2, 214.0], [4, 62.0], [6, 31.0], [2, 97.0], [2, 70.0], [12, 126.0], [6, 127.0], [26, 135.0], [55, 788.0], [8, 0], [10, 0], [50, 99.0], [12, 50.0], [2, 70.0], [5, 64.0], [4, 43.0], [2, 219.0], [1, 330.0], [1, 261.0], [3, 182.0], [4, 242.0], [14, 19.0], [35, 532.0], [6, 248.0], [7, 22.0], [152, 193.0], [2, 154.0], [2, 334.0], [3, 0], [21, 51.0], [12, 272.0], [2, 410.0], [1, 125.0], [26, 326.0], [34, 240.0], [3, 373.0], [3, 60.0], [11, 295.0], [3, 121.0], [51, 308.0], [35, 47.0], [2, 92.0], [2, 388.0], [7, 61.0], [25, 357.0], [9, 415.0], [9, 339.0], [22, 122.0], [3, 397.0], [4, 382.0], [15, 451.0], [86, 86.0], [3, 327.0], [4, 341.0], [2, 197.0], [2, 83.0], [33, 267.0], [13, 28.0], [18, 213.0], [4, 73.0], [24, 206.0], [2, 310.0], [7, 103.0], [1, 71.0], [12, 0], [34, 366.0], [7, 55.0], [9, 142.0], [29, 317.0], [28, 72.0], [2, 65.0], [16, 188.0], [1, 487.0], [7, 42.0], [1, 105.0], [13, 498.0], [10, 230.0], [13, 68.0], [339, 103.0], [4, 496.0], [1, 489.0], [11, 54.0], [45, 0], [7, 273.0], [2, 90.0], [2, 167.0], [2, 486.0], [2, 361.0], [2, 217.0], [2, 83.0], [2, 0], [2, 116.0], [13, 579.0], [73, 477.0], [10, 0], [59, 337.0], [1, 52.0], [5, 106.0], [6, 385.0], [86, 82.0], [183, 90.0], [7, 62.0], [6, 49.0], [6, 249.0], [1, 74.0], [1, 137.0], [7, 155.0], [2, 636.0], [2, 225.0], [1, 362.0], [8, 509.0], [8, 197.0], [8, 158.0], [4, 81.0], [27, 44.0], [6, 124.0], [4, 65.0], [7, 643.0], [5, 710.0], [15, 438.0], [2, 528.0], [15, 782.0], [34, 400.0], [2, 529.0], [6, 113.0], [30, 361.0], [1, 259.0], [12, 824.0], [26, 95.0], [19, 692.0], [5, 129.0], [3, 517.0], [3, 783.0], [15, 88.0], [42, 173.0], [10, 1990.0], [7, 653.0]]
v419_109 = [[10, 357.0], [25, 162.0], [10, 52.0], [8, 122.0], [13, 136.0], [6, 192.0], [2, 78.0], [2, 108.0], [9, 117.0], [131, 39.0], [2, 73.0], [6, 43.0], [2, 117.0], [434, 86.0], [288, 52.0], [2, 69.0], [6, 260.0], [3, 99.0], [352, 310.0], [282, 206.0], [22, 64.0], [2, 0], [11, 158.0], [2, 64.0], [1, 142.0], [1, 126.0], [1, 193.0], [1, 155.0], [1, 202.0], [1, 188.0], [1, 149.0], [1, 42.0], [1, 97.0], [1, 157.0], [1, 230.0], [1, 73.0], [2, 146.0], [2, 60.0], [2, 57.0], [3, 489.0], [3, 58.0], [8, 0], [7, 169.0], [7, 212.0], [8, 167.0], [5, 213.0], [18, 19.0], [4, 361.0], [1, 217.0], [8, 96.0], [10, 0], [7, 116.0], [2, 164.0], [1, 0], [6, 284.0], [15, 275.0], [57, 205.0], [7, 99.0], [2, 73.0], [22, 380.0], [12, 48.0], [6, 84.0], [3, 231.0], [2, 92.0], [4, 61.0], [35, 44.0], [2, 53.0], [13, 109.0], [5, 358.0], [3, 0], [10, 155.0], [37, 382.0], [14, 190.0], [1, 362.0], [20, 504.0], [7, 99.0], [7, 198.0], [16, 159.0], [307, 81.0], [3, 60.0], [24, 391.0], [738, 180.0], [6, 222.0], [2, 753.0], [7, 503.0], [4, 528.0], [14, 782.0], [169, 417.0], [10, 375.0], [15, 529.0], [33, 113.0], [1, 363.0], [25, 259.0], [13, 118.0], [4, 95.0], [1, 398.0], [15, 129.0], [10, 540.0], [6, 221.0], [4, 436.0], [2, 88.0], [34, 467.0], [6, 507.0], [28, 28.0], [5, 1980.0], [9, 185.0], [2, 470.0], [14, 172.0]]
v = [v44_216,v49_216,v414_173,v419_109]

def classify(versions_info):
    '''
    Find the child versions which are modified relatively less.
    versions_info: the list of the 2 dimentions which is the sum of the add and del times and the time interval of each small version
    return: the subscripts of the smallest cluster's data in the initail list.
    '''
    big_mofify_version = []
    for i in versions_info:
        test = KMeansClusterer(i,2)
        test.show_2d()
        if len(test.location()[0]) < len(test.location()[1]):
            big_mofify_version.append(test.location()[0])
        else:
            big_mofify_version.append(test.location()[1])
    return big_mofify_version

def classify_show():
    '''
    Draw the plot of the versions which are modified relatively more in the all version.
    '''
    for i in classify(v):
        for j in i:
            plt.scatter(j,0,s = 5, c = "red")
        plt.scatter(0,0,c = "white")
        plt.show()

if __name__ == "__main__":
    classify_show()